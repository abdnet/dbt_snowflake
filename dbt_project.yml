
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]



on-run-start: 
  - "{{ start__end__monitoring_global('START',this) }}"
  #- "{{ drop_all_schema() }}"
on-run-end: 
  - "{{ start__end__monitoring_global('END',this) }}"






target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

vars:
  DIM_DATE_START: '1990-01-01'
  DIM_DATE_END: '2000-06-01'
  batch_id: '{{invocation_id}}'
  dbt_date:time_zone: 'Europe/Paris'
  load_date: '{{ run_started_at.astimezone(modules.pytz.timezone("Europe/Paris")) }}'

# Monitoring
  process_db_schema_table_name: 'AUDIT_ANALYTICS_DATABASE.MONITOR.PROCESS'
  #  Logger level
  debug-level: 3
  debug-level-Info: 1
  debug-level-Warn: 2
  debug-level-Err: 3

# Initialisation
  INIT_ALL_DATABASES: true
  INIT_DATABASES: ['ANALYTICS','RAW']
  ANALYTICS: ['REPORTING','STAGING']
  RAW:  ['WH01']

# Tests asset-paths:
  ASSERT_DATA_TYPE: QUALITY_VALIDITY
  ASSERT_DATA_CONSISTENCY:  QUALITY_CONSISTENCY
  
  



# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  elementary:
    +database:  ANALYTICS
    +schema: "elementary"
  my_new_project:
    # Applies to all files under models/example/
    +database:  ANALYTICS
    Marts:
      tags: ['mart']
      +schema: reporting
      +pre-hook: 
        sql: '{{start__end__monitoring_local("START",this)}}'
      +post-hook: 
          sql: '{{start__end__monitoring_local("END",this)}}'
      +materialized: table
    Staging:
      tags: ['stg']
      +schema:  staging
      +pre-hook: 
        sql: '{{start__end__monitoring_local("START",this)}}'
      +post-hook: 
          sql: '{{start__end__monitoring_local("END",this)}}'
      +materialized:  view
    Objects:
      +materialized:  table #ephemeral
      tags: ['obj']
      +schema:  object
      +pre-hook: 
        sql: '{{start__end__monitoring_local("START",this)}}'
      +post-hook: 
          sql: '{{start__end__monitoring_local("END",this)}}'
    Transforming:
      +materialized: ephemeral
      tags: ['trans']
      +pre-hook: 
        sql: '{{start__end__monitoring_local("START",this)}}'
      +post-hook: 
          sql: '{{start__end__monitoring_local("END",this)}}'
seeds:
  my_new_project:
    +enabled: true
    +schema: seed_data

